#include "stdafx.h"
#include <windows.h> 
#include <stdio.h>
#include <wincrypt.h>
#define ENCRYPT_ALGORITHM CALG_AES_128

int _tmain(int argc, _TCHAR* argv[])
{
	HCRYPTPROV hCryptProv;
	HCRYPTKEY * hKeyPtr = (HCRYPTKEY *) malloc(sizeof(HCRYPTKEY));

	DWORD old;
	VirtualProtect(hKeyPtr, 100, PAGE_EXECUTE_READWRITE, &old);
	//VirtualProtect(hKeyPtr, 100, PAGE_NOACCESS, &old);

	printf("%p\n", hKeyPtr);

	//---------------------------------------------------------------
	// Get the handle to the provider.
	if(CryptAcquireContext(
		&hCryptProv, 
		NULL, 
		NULL, //MS_ENH_RSA_AES_PROV
		PROV_RSA_AES, 
		0))
	{
		printf("A cryptographic provider has been acquired. \n");
	}
	else
	{
		printf("Error during CryptAcquireContext!\n");
		exit(1);
	}


	//---------------------------------------------------------------
	//  Create a random session key. 

	if(CryptGenKey(
		hCryptProv, 
        ENCRYPT_ALGORITHM, 
        CRYPT_EXPORTABLE, //KEYLENGTH | CRYPT_EXPORTABLE, 
        hKeyPtr))
	{
		printf("A session key has been created.\n");
	} 
	else
	{
		printf("Error during CryptGenKey.\n"); 
        exit(1);
	}
	char text_test [] = "abcdabcdabcdabcd";
	DWORD text_len = strlen(text_test);
	printf("PlainText: %s\n",text_test);
    printf("Buf Len: %d\n",text_len);

    if (!CryptEncrypt(*hKeyPtr,
		NULL,  // hHash = no hash
        1,  // Final
        0,     // dwFlags
        (BYTE *) &text_test, //*pbData
        &text_len,  //*pdwDataLen
        32)) {      //dwBufLen
		printf("Encryption failed\n");
	}

	printf("CipherText: %s\n",text_test);
	printf("Len: %d\n",text_len);

	if (!CryptDecrypt(*hKeyPtr,
		NULL,  // hHash = no hash
        1,  // Final
        0,     // dwFlags
		(BYTE *) &text_test,
        &text_len)) {
		printf("Decryption failed\n");
	}

	printf("PlainText: %s\n",text_test);
	printf("Len: %d\n",text_len);
	CryptDestroyKey(*hKeyPtr);
	CryptReleaseContext(hCryptProv, 0);
	while(1);
	return 0;
}