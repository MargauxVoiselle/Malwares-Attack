#include "stdafx.h"
#include <windows.h> 
#include <stdio.h>
#include <wincrypt.h>

#define BUFSIZE 1024
#define SHA256_DIGEST_LENGTH 32

BYTE* calculateSHA256Hash(const char* data, DWORD dataSize) {
    HCRYPTPROV hProv = 0;
    HCRYPTHASH hHash = 0;
    BYTE rgbHash[BUFSIZE];
    DWORD cbHash = BUFSIZE;
    DWORD dwCount;

    if (!CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
        _tprintf(_T("Error during CryptAcquireContext!\n"));
        return NULL;
    }

    if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
        _tprintf(_T("Error during CryptCreateHash!\n"));
        CryptReleaseContext(hProv, 0);
        return NULL;
    }

    if (!CryptHashData(hHash, (BYTE*)data, dataSize, 0)) {
        _tprintf(_T("Error during CryptHashData!\n"));
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        return NULL;
    }

    if (!CryptGetHashParam(hHash, HP_HASHVAL, rgbHash, &cbHash, 0)) {
        _tprintf(_T("Error during CryptGetHashParam!\n"));
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        return NULL;
    }

    BYTE* hashResult = (BYTE*)malloc(cbHash);
    if (hashResult == NULL) {
        _tprintf(_T("Memory allocation error!\n"));
        CryptDestroyHash(hHash);
        CryptReleaseContext(hProv, 0);
        return NULL;
    }

    // Copy the hash into the allocated array
    memcpy(hashResult, rgbHash, cbHash);

    CryptDestroyHash(hHash);
    CryptReleaseContext(hProv, 0);

    return hashResult;
}

int main() {
    const char* string1 = "Hello, World!";
    const char* string2 = "Hello, World!";

    DWORD size1 = strlen(string1);
    DWORD size2 = strlen(string2);

    // Calculate SHA-256 hash for each string
    BYTE* hash1 = calculateSHA256Hash(string1, size1);
    BYTE* hash2 = calculateSHA256Hash(string2, size2);

    if (hash1 != NULL && hash2 != NULL) {
        // Compare the hashes
        if (memcmp(hash1, hash2, SHA256_DIGEST_LENGTH) == 0) {
            _tprintf(_T("Hashes are equal.\n"));
        } else {
            _tprintf(_T("Hashes are not equal.\n"));
        }

        // Free allocated memory
        free(hash1);
        free(hash2);
    }

    return 0;
}
