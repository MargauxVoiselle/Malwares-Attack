#include "stdafx.h"
#include <windows.h> 
#include <stdio.h>
#include <wincrypt.h>
#define ENCRYPT_ALGORITHM CALG_AES_128
#define BUFSIZE 1024

HCRYPTPROV hCryptProv;
HCRYPTKEY * hKeyPtr = (HCRYPTKEY *) malloc(sizeof(HCRYPTKEY));

void encrypt();
void decrypt();
void calculateHash(char* input);

char * input = (char *) malloc(32*sizeof(char));
DWORD length;
DWORD initialLength;

int _tmain(int argc, _TCHAR* argv[])
{
	printf("Input?\n");
	// %32 à changer
	scanf("%32s", input);
	printf("Votre input est %s\n", input);

	length = strlen(input);
	initialLength = strlen(input);

	printf("\nDébut du chiffrement\n");
	if (CryptAcquireContext(
        &hCryptProv,
        NULL,
        NULL,
        PROV_RSA_AES,
        0))
    {
        printf("A cryptographic provider has been acquired. \n");
    }
    else
    {
        printf("Error during CryptAcquireContext!\n");
        exit(1);
    }
	
	// Encrypt the input
	encrypt();

	printf("Encrypted Text: %s\n", input);
	printf("Fin du chiffrement\n");

	/////////////////////////////////////////

	char * inputToHash = (char *) malloc(length * sizeof(char));
	strcpy(inputToHash, input);

	printf("\nDébut du hashage\n");
	printf("Variable locale pour le hash : %s\n", inputToHash);
	calculateHash(inputToHash);
	printf("Fin du hashage\n");



	//////////////////////////////////////////

	printf("\nDébut du déchiffrement\n");
    // Decrypt the encrypted input
    decrypt();

	printf("Decrypted Text: %.*s\n", initialLength, input);
	printf("Fin du déchiffrement\n");

	while(1);
	return 0;
}

void encrypt(){
	//DWORD oldPermissions;
	//VirtualProtect(hKeyPtr, 100, PAGE_EXECUTE_READWRITE, &oldPermissions);


	if(CryptGenKey(
		hCryptProv, 
        ENCRYPT_ALGORITHM, 
        CRYPT_EXPORTABLE,
        hKeyPtr))
	{
		printf("A session key has been created.\n");
	} 
	else
	{
		printf("Error during CryptGenKey.\n"); 
        exit(1);
	}

	printf("PlainText: %s\n",input);
    printf("Buf Len: %d\n",length);

	if (!CryptEncrypt(*hKeyPtr,
		NULL, 
        1,  
        0, 
        (BYTE *) input, 
        &length,
        32)) {   
		printf("Encryption failed\n");
		exit(1);
	}
}

void decrypt()
{
    if (!CryptDecrypt(*hKeyPtr,
        NULL,
        1,
        0,
        (BYTE *) input,
        &length))
    {
        printf("Decryption failed\n");
        exit(1);
    }
}

void calculateHash(char* input) {
    HCRYPTPROV hProv = 0;
    HCRYPTHASH hHash = 0;
    BYTE rgbHash[BUFSIZE];
    DWORD cbHash = 0;
    DWORD dwCount;

    if (!CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
        printf("Error during CryptAcquireContext!\n");
        return;
    }

    if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
        printf("Error during CryptCreateHash!\n");
        CryptReleaseContext(hProv, 0);
        return;
    }

    if (!CryptHashData(hHash, (BYTE*)input, strlen(input), 0)) {
        printf("Error during CryptHashData!\n");
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        return;
    }

    cbHash = sizeof(rgbHash);
    if (CryptGetHashParam(hHash, HP_HASHVAL, rgbHash, &cbHash, 0)) {
        printf("Hash Value: ");
        for (dwCount = 0; dwCount < cbHash; dwCount++)
            printf("%02x", rgbHash[dwCount]);
        printf("\n");
    }
    else {
        printf("Error during CryptGetHashParam!\n");
    }

    CryptDestroyHash(hHash);
    CryptReleaseContext(hProv, 0);
}